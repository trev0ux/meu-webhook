// server/utils/onboarding-manager.ts
import {
  buscarEstadoConversa,
  salvarEstadoConversa,
  limparEstadoConversa,
  atualizarUsuario
} from '../../../db/users'
import { obterCategoriasPadrao, salvarCategoriasPersonalizadas } from './categorias-service'

/**
 * Interface para representar o estado do onboarding
 */
interface EstadoOnboarding {
  etapa: string
  dados: Record<string, any>
  iniciado_em: Date
  ultima_atualizacao: Date
}

/**
 * Interface para o resultado do processamento de uma etapa
 */
interface ResultadoProcessamento {
  mensagem: string
  completo: boolean
}

/**
 * Processa cada etapa do onboarding do usu√°rio no WhatsApp
 *
 * @param mensagem Mensagem recebida do usu√°rio
 * @param usuarioId ID do usu√°rio no sistema
 * @returns Objeto com a mensagem a ser enviada e flag indicando se o onboarding foi conclu√≠do
 */
export async function processarEtapaOnboarding(
  mensagem: string,
  usuarioId: number
): Promise<ResultadoProcessamento> {
  try {
    // Buscar informa√ß√µes do usu√°rio (incluindo o perfil)
    const usuario = await buscarUsuario(usuarioId)

    // Verificar se h√° um estado de onboarding salvo
    let estado = (await buscarEstadoConversa(usuarioId, 'onboarding')) as EstadoOnboarding

    // Se n√£o existir, iniciar um novo fluxo de onboarding
    if (!estado) {
      estado = iniciarNovoOnboarding(usuario)
      await salvarEstadoConversa(usuarioId, 'onboarding', estado)

      return {
        mensagem: gerarMensagemBoasVindas(usuario),
        completo: false
      }
    }

    console.log(usuario)

    // Processar a etapa atual com base no perfil do usu√°rio
    if (usuario.perfil === 'pessoa_fisica') {
      return await processarEtapaPessoaFisica(mensagem, usuarioId, estado, usuario)
    } else {
      return await processarEtapaEmpreendedor(mensagem, usuarioId, estado, usuario)
    }
  } catch (error) {
    console.error('Erro ao processar etapa de onboarding:', error)

    return {
      mensagem: `
Ocorreu um erro durante a configura√ß√£o. Por favor, digite "reiniciar" para recome√ßar ou entre em contato com o suporte.
      `,
      completo: false
    }
  }
}

/**
 * Inicializa um novo estado de onboarding
 */
function iniciarNovoOnboarding(usuario: any): EstadoOnboarding {
  return {
    etapa: 'nome_preferido',
    dados: {},
    iniciado_em: new Date(),
    ultima_atualizacao: new Date()
  }
}

/**
 * Busca informa√ß√µes do usu√°rio do banco de dados
 */
async function buscarUsuario(usuarioId: number): Promise<any> {
  // Em uma implementa√ß√£o real, buscar√≠amos do banco de dados
  // Aqui retornamos um objeto simulado para testes
  return {
    id: usuarioId,
    nome: 'Usu√°rio Teste',
    email: 'teste@exemplo.com',
    perfil: 'empresario_individual', // ou 'pessoa_fisica'
    spreadsheet_id: 'abc123',
    onboarding_completo: false
  }
}

/**
 * Gera a mensagem de boas-vindas para o onboarding
 */
function gerarMensagemBoasVindas(usuario: any): string {
  const mensagemBase = `
üåü *Vamos personalizar seu assistente financeiro!* üåü

Voc√™ j√° completou o cadastro no site, agora vamos ajustar alguns detalhes para melhorar sua experi√™ncia no WhatsApp.

Como voc√™ gostaria de ser chamado(a)?
  `

  if (usuario.perfil === 'pessoa_fisica') {
    return mensagemBase
  } else {
    return `
${mensagemBase}

No seu caso, como empreendedor(a), vamos personalizar tanto suas finan√ßas pessoais quanto empresariais.
    `
  }
}

/**
 * Processa etapas de onboarding para perfil Pessoa F√≠sica
 */
async function processarEtapaPessoaFisica(
  mensagem: string,
  usuarioId: number,
  estado: EstadoOnboarding,
  usuario: any
): Promise<ResultadoProcessamento> {
  const { etapa, dados } = estado

  switch (etapa) {
    case 'nome_preferido':
      // Salvar nome preferido
      dados.nome_preferido = mensagem.trim()
      estado.etapa = 'exemplo_despesa'
      estado.ultima_atualizacao = new Date()

      // Atualizar nome do usu√°rio no banco
      await atualizarUsuario(usuarioId, { nome: dados.nome_preferido })

      await salvarEstadoConversa(usuarioId, 'onboarding', estado)

      return {
        mensagem: `
√ìtimo, ${dados.nome_preferido}! üëã 

Para personalizar melhor o Finia, preciso entender como voc√™ costuma registrar suas transa√ß√µes.

üí∏ *Me d√™ um exemplo de como voc√™ registraria um gasto:*
_(Escreva exatamente como costuma anotar quando gasta dinheiro)_

Exemplo: "Mercado R$ 150" ou "Paguei R$ 35 no Uber"
        `,
        completo: false
      }

    case 'exemplo_despesa':
      // Salvar exemplo de despesa
      dados.exemplo_despesa = mensagem.trim()
      estado.etapa = 'exemplo_receita'
      estado.ultima_atualizacao = new Date()

      await salvarEstadoConversa(usuarioId, 'onboarding', estado)

      return {
        mensagem: `
Perfeito! Agora, me d√™ um exemplo de como voc√™ registraria uma receita:

üí∞ *Como voc√™ anotaria quando recebe dinheiro?*
_(Escreva naturalmente, como faria no dia a dia)_

Exemplo: "Recebi sal√°rio R$ 3000" ou "Pagamento freelance R$ 500"
        `,
        completo: false
      }

    case 'exemplo_receita':
      // Salvar exemplo de receita
      dados.exemplo_receita = mensagem.trim()
      estado.etapa = 'confirmacao_categorias'
      estado.ultima_atualizacao = new Date()

      // Analisar exemplos para extrair padr√µes (implementa√ß√£o simplificada)
      dados.padroes = analisarPadroes(dados.exemplo_despesa, dados.exemplo_receita)

      // Buscar categorias padr√£o para pessoa f√≠sica
      const categoriasPadrao = await obterCategoriasPadrao('pessoa_fisica')
      dados.categorias = categoriasPadrao

      await salvarEstadoConversa(usuarioId, 'onboarding', estado)

      // Montar lista de categorias para exibi√ß√£o
      const listaCategorias = dados.categorias.map((cat) => `‚Ä¢ ${cat.nome}`).join('\n')

      return {
        mensagem: `
Obrigado pelos exemplos! Baseado no seu perfil, sugerimos as seguintes categorias:

üìã *Categorias sugeridas:*
${listaCategorias}

Estas categorias est√£o boas para voc√™? 
Responda com "sim" para confirmar ou "n√£o" para personaliz√°-las.
        `,
        completo: false
      }

    case 'confirmacao_categorias':
      const respostaLower = mensagem.toLowerCase().trim()

      if (['sim', 's', 'yes', 'y', '1'].includes(respostaLower)) {
        // Usu√°rio aceitou as categorias padr√£o
        estado.etapa = 'modo_aprendizado'
        estado.ultima_atualizacao = new Date()

        await salvarEstadoConversa(usuarioId, 'onboarding', estado)

        return {
          mensagem: `
√ìtimo! Agora, como voc√™ prefere que o Finia aprenda com voc√™?

1Ô∏è‚É£ *Modo Assistido* - Te pergunta antes de cada classifica√ß√£o
2Ô∏è‚É£ *Modo Autom√°tico* - Classifica automaticamente e aprende com corre√ß√µes
3Ô∏è‚É£ *Modo H√≠brido* - Pergunta apenas quando n√£o tem certeza

Responda com o n√∫mero da sua prefer√™ncia.
          `,
          completo: false
        }
      } else if (['n√£o', 'nao', 'n', 'no', '2'].includes(respostaLower)) {
        // Usu√°rio quer personalizar categorias
        estado.etapa = 'personalizacao_categorias'
        estado.ultima_atualizacao = new Date()

        await salvarEstadoConversa(usuarioId, 'onboarding', estado)

        return {
          mensagem: `
Sem problemas! Vamos personalizar suas categorias.

üìù *Digite suas categorias preferidas*, separadas por v√≠rgula.
Exemplo: "Mercado, Restaurantes, Transporte, Moradia, Lazer, Educa√ß√£o"

Suas categorias atuais podem ser usadas como base:
${dados.categorias.map((cat) => cat.nome).join(', ')}
          `,
          completo: false
        }
      } else {
        // Resposta n√£o reconhecida
        return {
          mensagem: `
N√£o entendi sua resposta. Por favor, responda com "sim" para aceitar as categorias sugeridas ou "n√£o" para personaliz√°-las.
          `,
          completo: false
        }
      }

    case 'personalizacao_categorias':
      // Processar categorias personalizadas
      const categoriasPersonalizadas = mensagem
        .split(',')
        .map((cat) => cat.trim())
        .filter((cat) => cat.length > 0)
        .map((nome) => ({
          nome,
          tipo: 'despesa',
          icone: obterIconePadrao(nome)
        }))

      if (categoriasPersonalizadas.length === 0) {
        return {
          mensagem: `
Por favor, digite pelo menos uma categoria v√°lida, separada por v√≠rgula.
Exemplo: "Alimenta√ß√£o, Transporte, Lazer"
          `,
          completo: false
        }
      }

      // Salvar novas categorias
      dados.categorias = categoriasPersonalizadas
      estado.etapa = 'modo_aprendizado'
      estado.ultima_atualizacao = new Date()

      await salvarEstadoConversa(usuarioId, 'onboarding', estado)

      return {
        mensagem: `
‚úÖ Categorias personalizadas salvas!

Agora, como voc√™ prefere que o Finia aprenda com voc√™?

1Ô∏è‚É£ *Modo Assistido* - Te pergunta antes de cada classifica√ß√£o
2Ô∏è‚É£ *Modo Autom√°tico* - Classifica automaticamente e aprende com corre√ß√µes
3Ô∏è‚É£ *Modo H√≠brido* - Pergunta apenas quando n√£o tem certeza

Responda com o n√∫mero da sua prefer√™ncia.
        `,
        completo: false
      }

    case 'modo_aprendizado':
      // Processar escolha do modo de aprendizado
      const opcaoModo = mensagem.trim()

      if (!['1', '2', '3'].includes(opcaoModo)) {
        return {
          mensagem: `
Por favor, escolha uma op√ß√£o v√°lida (1, 2 ou 3) para o modo de aprendizado.
          `,
          completo: false
        }
      }

      const modosAprendizado = ['assistido', 'automatico', 'hibrido']
      dados.modo_aprendizado = modosAprendizado[parseInt(opcaoModo) - 1]

      // Salvar prefer√™ncias do usu√°rio
      const preferencias = {
        modo_aprendizado: dados.modo_aprendizado,
        categorias: dados.categorias,
        padroes: dados.padroes
      }

      // Em uma implementa√ß√£o real, salvar√≠amos no banco de dados
      await salvarPreferenciasUsuario(usuarioId, preferencias)

      // Salvar categorias personalizadas (se houver)
      if (dados.categorias && dados.categorias.length > 0) {
        await salvarCategoriasPersonalizadas(usuarioId, dados.categorias)
      }

      // Marcar onboarding como conclu√≠do
      estado.etapa = 'concluido'
      estado.ultima_atualizacao = new Date()

      await salvarEstadoConversa(usuarioId, 'onboarding', estado)
      await limparEstadoConversa(usuarioId, 'onboarding')

      // Atualizar status do usu√°rio
      await atualizarUsuario(usuarioId, { onboarding_completo: true })

      return {
        mensagem: `
üéâ *Configura√ß√£o conclu√≠da com sucesso!* üéâ

Ol√°, ${dados.nome_preferido}! Seu assistente financeiro est√° pronto para uso.

*Modo de aprendizado:* ${traduzirModoAprendizado(dados.modo_aprendizado)}
*Categorias configuradas:* ${dados.categorias.length}

*Como usar:*
‚Ä¢ Para registrar gastos, envie mensagens como: "${dados.exemplo_despesa}"
‚Ä¢ Para registrar receitas, envie mensagens como: "${dados.exemplo_receita}"
‚Ä¢ Para corrigir uma classifica√ß√£o: "Corrigir: categoria X"
‚Ä¢ Para relat√≥rios: Digite "!relatorio"
‚Ä¢ Para ajuda: Digite "!ajuda"

Vamos come√ßar? Registre sua primeira transa√ß√£o agora! üí™
        `,
        completo: true
      }

    default:
      // Estado desconhecido, reiniciar onboarding
      await limparEstadoConversa(usuarioId, 'onboarding')

      return {
        mensagem: `
Parece que houve um problema com sua configura√ß√£o. Vamos recome√ßar.

Como voc√™ gostaria de ser chamado(a)?
        `,
        completo: false
      }
  }
}

/**
 * Processa etapas de onboarding para perfil Empreendedor
 */
async function processarEtapaEmpreendedor(
  mensagem: string,
  usuarioId: number,
  estado: EstadoOnboarding,
  usuario: any
): Promise<ResultadoProcessamento> {
  const { etapa, dados } = estado
  console.log(estado)

  switch (etapa) {
    case 'nome_preferido':
      // Salvar nome preferido
      dados.nome_preferido = mensagem.trim()
      estado.etapa = 'descricao_negocio'
      estado.ultima_atualizacao = new Date()

      // Atualizar nome do usu√°rio no banco
      await atualizarUsuario(usuarioId, { nome: dados.nome_preferido })

      await salvarEstadoConversa(usuarioId, 'onboarding', estado)

      return {
        mensagem: `
√ìtimo, ${dados.nome_preferido}! üëã 

Para personalizar melhor o Finia, me conte um pouco sobre seu neg√≥cio ou atividade profissional.

üíº *O que voc√™ faz?*
_(Exemplo: "Sou designer freelancer", "Tenho uma loja de roupas", "Trabalho como consultor")_
        `,
        completo: false
      }

    case 'descricao_negocio':
      // Salvar descri√ß√£o do neg√≥cio
      dados.descricao_negocio = mensagem.trim()
      estado.etapa = 'exemplo_despesa_pj'
      estado.ultima_atualizacao = new Date()

      await salvarEstadoConversa(usuarioId, 'onboarding', estado)

      return {
        mensagem: `
Entendi que voc√™ ${dados.descricao_negocio}. Vamos configurar suas categorias.

Primeiro, me d√™ um exemplo de como voc√™ registraria um *gasto empresarial (PJ)*:

üíº *Como voc√™ anotaria uma despesa do seu neg√≥cio?*
_(Escreva naturalmente, como faria no dia a dia)_

Exemplo: "Marketing facebook R$ 200" ou "Material para cliente R$ 150"
        `,
        completo: false
      }

    case 'exemplo_despesa_pj':
      // Salvar exemplo de despesa PJ
      dados.exemplo_despesa_pj = mensagem.trim()
      estado.etapa = 'exemplo_receita_pj'
      estado.ultima_atualizacao = new Date()

      await salvarEstadoConversa(usuarioId, 'onboarding', estado)

      return {
        mensagem: `
Perfeito! Agora, me d√™ um exemplo de como voc√™ registraria uma *receita empresarial (PJ)*:

üí∞ *Como voc√™ anotaria quando seu neg√≥cio recebe dinheiro?*
_(Escreva naturalmente, como faria no dia a dia)_

Exemplo: "Cliente Jo√£o pagou R$ 1000" ou "Venda loja R$ 500"
        `,
        completo: false
      }

    case 'exemplo_receita_pj':
      // Salvar exemplo de receita PJ
      dados.exemplo_receita_pj = mensagem.trim()
      estado.etapa = 'exemplo_despesa_pf'
      estado.ultima_atualizacao = new Date()

      await salvarEstadoConversa(usuarioId, 'onboarding', estado)

      return {
        mensagem: `
√ìtimo! Agora vamos para sua vida pessoal.

Me d√™ um exemplo de como voc√™ registraria um *gasto pessoal (PF)*:

üë§ *Como voc√™ anotaria uma despesa pessoal?*
_(Escreva naturalmente, como faria no dia a dia)_

Exemplo: "Mercado R$ 200" ou "Cinema R$ 50"
        `,
        completo: false
      }

    case 'exemplo_despesa_pf':
      // Salvar exemplo de despesa PF
      dados.exemplo_despesa_pf = mensagem.trim()
      estado.etapa = 'confirmacao_categorias'
      estado.ultima_atualizacao = new Date()

      // Analisar exemplos para extrair padr√µes
      dados.padroes = {
        pj: analisarPadroes(dados.exemplo_despesa_pj, dados.exemplo_receita_pj),
        pf: analisarPadroes(dados.exemplo_despesa_pf, '')
      }

      // Buscar categorias padr√£o para empreendedor
      const categoriasPJ = await obterCategoriasPadrao('empresario_individual', 'PJ')
      const categoriasPF = await obterCategoriasPadrao('empresario_individual', 'PF')

      dados.categorias = {
        pj: categoriasPJ,
        pf: categoriasPF
      }

      await salvarEstadoConversa(usuarioId, 'onboarding', estado)

      // Montar listas de categorias para exibi√ß√£o
      const listaCategoriasEmpresas = dados.categorias.pj.map((cat) => `‚Ä¢ ${cat.nome}`).join('\n')

      const listaCategoriasPessoais = dados.categorias.pf.map((cat) => `‚Ä¢ ${cat.nome}`).join('\n')

      return {
        mensagem: `
Baseado no seu perfil e atividade, sugerimos as seguintes categorias:

üíº *Categorias Empresariais (PJ):*
${listaCategoriasEmpresas}

üë§ *Categorias Pessoais (PF):*
${listaCategoriasPessoais}

Estas categorias est√£o boas para voc√™?
Responda com "sim" para confirmar ou "n√£o" para personaliz√°-las.
        `,
        completo: false
      }

    case 'confirmacao_categorias':
      const respostaLower = mensagem.toLowerCase().trim()

      if (['sim', 's', 'yes', 'y', '1'].includes(respostaLower)) {
        // Usu√°rio aceitou as categorias padr√£o
        estado.etapa = 'palavras_chave'
        estado.ultima_atualizacao = new Date()

        await salvarEstadoConversa(usuarioId, 'onboarding', estado)

        return {
          mensagem: `
√ìtimo! Para melhorar a classifica√ß√£o autom√°tica:

üîç *Quais palavras voc√™ associa com GASTOS EMPRESARIAIS?*
Digite algumas palavras separadas por v√≠rgula.

Exemplos: cliente, empresa, fornecedor, servi√ßo, projeto
          `,
          completo: false
        }
      } else if (['n√£o', 'nao', 'n', 'no', '2'].includes(respostaLower)) {
        // Usu√°rio quer personalizar categorias
        estado.etapa = 'escolha_personalizacao'
        estado.ultima_atualizacao = new Date()

        await salvarEstadoConversa(usuarioId, 'onboarding', estado)

        return {
          mensagem: `
O que voc√™ gostaria de personalizar?

1Ô∏è‚É£ Categorias Empresariais (PJ)
2Ô∏è‚É£ Categorias Pessoais (PF)
3Ô∏è‚É£ Ambas

Responda com o n√∫mero da sua escolha.
          `,
          completo: false
        }
      } else {
        // Resposta n√£o reconhecida
        return {
          mensagem: `
N√£o entendi sua resposta. Por favor, responda com "sim" para aceitar as categorias sugeridas ou "n√£o" para personaliz√°-las.
          `,
          completo: false
        }
      }

    case 'escolha_personalizacao':
      // Processar escolha de personaliza√ß√£o
      const opcao = mensagem.trim()

      if (opcao === '1') {
        // Personalizar categorias PJ
        estado.etapa = 'personalizacao_pj'
        estado.ultima_atualizacao = new Date()

        await salvarEstadoConversa(usuarioId, 'onboarding', estado)

        return {
          mensagem: `
üìù *Digite suas categorias empresariais (PJ) preferidas*, separadas por v√≠rgula.
Exemplo: "Marketing, Materiais, Software, Equipamentos, Impostos"

Suas categorias atuais podem ser usadas como base:
${dados.categorias.pj.map((cat) => cat.nome).join(', ')}
          `,
          completo: false
        }
      } else if (opcao === '2') {
        // Personalizar categorias PF
        estado.etapa = 'personalizacao_pf'
        estado.ultima_atualizacao = new Date()

        await salvarEstadoConversa(usuarioId, 'onboarding', estado)

        return {
          mensagem: `
üìù *Digite suas categorias pessoais (PF) preferidas*, separadas por v√≠rgula.
Exemplo: "Alimenta√ß√£o, Moradia, Transporte, Lazer, Sa√∫de"

Suas categorias atuais podem ser usadas como base:
${dados.categorias.pf.map((cat) => cat.nome).join(', ')}
          `,
          completo: false
        }
      } else if (opcao === '3') {
        // Personalizar ambas
        estado.etapa = 'personalizacao_pj'
        dados.personalizar_ambas = true
        estado.ultima_atualizacao = new Date()

        await salvarEstadoConversa(usuarioId, 'onboarding', estado)

        return {
          mensagem: `
Vamos personalizar as duas! Comecemos pelas empresariais:

üìù *Digite suas categorias empresariais (PJ) preferidas*, separadas por v√≠rgula.
Exemplo: "Marketing, Materiais, Software, Equipamentos, Impostos"

Suas categorias atuais podem ser usadas como base:
${dados.categorias.pj.map((cat) => cat.nome).join(', ')}
          `,
          completo: false
        }
      } else {
        return {
          mensagem: `
Por favor, responda com 1, 2 ou 3 para escolher o que deseja personalizar.
          `,
          completo: false
        }
      }

    case 'personalizacao_pj':
      // Processar categorias PJ personalizadas
      const categoriasPJPersonalizadas = mensagem
        .split(',')
        .map((cat) => cat.trim())
        .filter((cat) => cat.length > 0)
        .map((nome) => ({
          nome,
          tipo: 'PJ',
          icone: obterIconePadrao(nome)
        }))

      if (categoriasPJPersonalizadas.length === 0) {
        return {
          mensagem: `
Por favor, digite pelo menos uma categoria v√°lida, separada por v√≠rgula.
Exemplo: "Marketing, Materiais, Software"
          `,
          completo: false
        }
      }

      // Salvar novas categorias PJ
      dados.categorias.pj = categoriasPJPersonalizadas

      // Se estiver personalizando ambas, ir para PF depois
      if (dados.personalizar_ambas) {
        estado.etapa = 'personalizacao_pf'
        estado.ultima_atualizacao = new Date()

        await salvarEstadoConversa(usuarioId, 'onboarding', estado)

        return {
          mensagem: `
‚úÖ Categorias empresariais (PJ) atualizadas!

Agora, vamos personalizar suas categorias pessoais:

üìù *Digite suas categorias pessoais (PF) preferidas*, separadas por v√≠rgula.
Exemplo: "Alimenta√ß√£o, Moradia, Transporte, Lazer, Sa√∫de"

Suas categorias atuais podem ser usadas como base:
${dados.categorias.pf.map((cat) => cat.nome).join(', ')}
          `,
          completo: false
        }
      } else {
        // Ir para palavras-chave
        estado.etapa = 'palavras_chave'
        estado.ultima_atualizacao = new Date()

        await salvarEstadoConversa(usuarioId, 'onboarding', estado)

        return {
          mensagem: `
‚úÖ Categorias empresariais (PJ) atualizadas!

Para melhorar a classifica√ß√£o autom√°tica:

üîç *Quais palavras voc√™ associa com GASTOS EMPRESARIAIS?*
Digite algumas palavras separadas por v√≠rgula.

Exemplos: cliente, empresa, fornecedor, servi√ßo, projeto
          `,
          completo: false
        }
      }

    case 'personalizacao_pf':
      // Processar categorias PF personalizadas
      const categoriasPFPersonalizadas = mensagem
        .split(',')
        .map((cat) => cat.trim())
        .filter((cat) => cat.length > 0)
        .map((nome) => ({
          nome,
          tipo: 'PF',
          icone: obterIconePadrao(nome)
        }))

      if (categoriasPFPersonalizadas.length === 0) {
        return {
          mensagem: `
Por favor, digite pelo menos uma categoria v√°lida, separada por v√≠rgula.
Exemplo: "Alimenta√ß√£o, Moradia, Transporte"
          `,
          completo: false
        }
      }

      // Salvar novas categorias PF
      dados.categorias.pf = categoriasPFPersonalizadas
      estado.etapa = 'palavras_chave'
      estado.ultima_atualizacao = new Date()

      await salvarEstadoConversa(usuarioId, 'onboarding', estado)

      return {
        mensagem: `
‚úÖ Categorias pessoais (PF) atualizadas!

Para melhorar a classifica√ß√£o autom√°tica:

üîç *Quais palavras voc√™ associa com GASTOS EMPRESARIAIS?*
Digite algumas palavras separadas por v√≠rgula.

Exemplos: cliente, empresa, fornecedor, servi√ßo, projeto
        `,
        completo: false
      }

    case 'palavras_chave':
      // Salvar palavras-chave PJ
      dados.palavras_chave_pj = mensagem
        .split(',')
        .map((palavra) => palavra.trim())
        .filter((palavra) => palavra.length > 0)

      estado.etapa = 'palavras_chave_pf'
      estado.ultima_atualizacao = new Date()

      await salvarEstadoConversa(usuarioId, 'onboarding', estado)

      return {
        mensagem: `
‚úÖ Palavras-chave empresariais salvas!

üîç *Agora, quais palavras voc√™ associa com GASTOS PESSOAIS?*
Digite algumas palavras separadas por v√≠rgula.

Exemplos: casa, pessoal, fam√≠lia, mercado, lazer
        `,
        completo: false
      }

    case 'palavras_chave_pf':
      // Salvar palavras-chave PF
      dados.palavras_chave_pf = mensagem
        .split(',')
        .map((palavra) => palavra.trim())
        .filter((palavra) => palavra.length > 0)

      estado.etapa = 'modo_aprendizado'
      estado.ultima_atualizacao = new Date()

      await salvarEstadoConversa(usuarioId, 'onboarding', estado)

      return {
        mensagem: `
‚úÖ Palavras-chave pessoais salvas!

Por fim, como voc√™ prefere que o Finia aprenda com voc√™?

1Ô∏è‚É£ *Modo Assistido* - Te pergunta antes de cada classifica√ß√£o
2Ô∏è‚É£ *Modo Autom√°tico* - Classifica automaticamente e aprende com corre√ß√µes
3Ô∏è‚É£ *Modo H√≠brido* - Pergunta apenas quando n√£o tem certeza

Responda com o n√∫mero da sua prefer√™ncia.
        `,
        completo: false
      }

    case 'modo_aprendizado':
      // Processar escolha do modo de aprendizado
      const opcaoModo = mensagem.trim()

      if (!['1', '2', '3'].includes(opcaoModo)) {
        return {
          mensagem: `
Por favor, escolha uma op√ß√£o v√°lida (1, 2 ou 3) para o modo de aprendizado.
          `,
          completo: false
        }
      }

      const modosAprendizado = ['assistido', 'automatico', 'hibrido']
      dados.modo_aprendizado = modosAprendizado[parseInt(opcaoModo) - 1]

      // Salvar prefer√™ncias completas do usu√°rio
      const preferencias = {
        modo_aprendizado: dados.modo_aprendizado,
        categorias: dados.categorias,
        padroes: dados.padroes,
        palavras_chave: {
          pj: dados.palavras_chave_pj,
          pf: dados.palavras_chave_pf
        }
      }

      // Em uma implementa√ß√£o real, salvar√≠amos no banco de dados
      await salvarPreferenciasUsuario(usuarioId, preferencias)

      // Salvar categorias personalizadas (se houver)
      if (dados.categorias) {
        if (dados.categorias.pj && dados.categorias.pj.length > 0) {
          await salvarCategoriasPersonalizadas(usuarioId, dados.categorias.pj, 'PJ')
        }
        if (dados.categorias.pf && dados.categorias.pf.length > 0) {
          await salvarCategoriasPersonalizadas(usuarioId, dados.categorias.pf, 'PF')
        }
      }

      // Marcar onboarding como conclu√≠do
      estado.etapa = 'concluido'
      estado.ultima_atualizacao = new Date()

      await salvarEstadoConversa(usuarioId, 'onboarding', estado)
      await limparEstadoConversa(usuarioId, 'onboarding')

      // Atualizar status do usu√°rio
      await atualizarUsuario(usuarioId, { onboarding_completo: true })

      return {
        mensagem: `
üéâ *Configura√ß√£o conclu√≠da com sucesso!* üéâ

Ol√°, ${dados.nome_preferido}! Seu assistente financeiro est√° pronto para uso.

*Modo de aprendizado:* ${traduzirModoAprendizado(dados.modo_aprendizado)}
*Categorias empresariais:* ${dados.categorias.pj.length}
*Categorias pessoais:* ${dados.categorias.pf.length}

*Como usar:*
‚Ä¢ Para gastos empresariais: "${dados.exemplo_despesa_pj}"
‚Ä¢ Para receitas empresariais: "${dados.exemplo_receita_pj}"
‚Ä¢ Para gastos pessoais: "${dados.exemplo_despesa_pf}"
‚Ä¢ Para corrigir uma classifica√ß√£o: "Corrigir: categoria X"
‚Ä¢ Para relat√≥rios: Digite "!relatorio"
‚Ä¢ Para ajuda: Digite "!ajuda"

O Finia aprender√° e se adaptar√° ao seu estilo conforme voc√™ o utiliza.
Vamos come√ßar? Registre sua primeira transa√ß√£o agora! üí™
        `,
        completo: true
      }

    default:
      // Estado desconhecido, reiniciar onboarding
      await limparEstadoConversa(usuarioId, 'onboarding')

      return {
        mensagem: `
Parece que houve um problema com sua configura√ß√£o. Vamos recome√ßar.

Como voc√™ gostaria de ser chamado(a)?
        `,
        completo: false
      }
  }
}

/**
 * Analisa padr√µes nos exemplos fornecidos pelo usu√°rio
 */
function analisarPadroes(exemploGasto: string, exemploReceita: string): any {
  // Detectar padr√µes nos exemplos
  const padroesDetectados = {
    // Formato de valor
    formato_valor: detectarFormatoValor(exemploGasto, exemploReceita),

    // Posi√ß√£o do valor
    valor_posicao: detectarPosicaoValor(exemploGasto, exemploReceita),

    // Estilo de descri√ß√£o (detalhado, curto)
    estilo_descricao: exemploGasto.split(' ').length > 3 ? 'detalhado' : 'curto',

    // Usa data explicitamente?
    usa_data: detectarUsoData(exemploGasto, exemploReceita),

    // Palavras-chave espec√≠ficas
    palavras_chave: extrairPalavrasChave(exemploGasto, exemploReceita)
  }

  return padroesDetectados
}

/**
 * Detecta o formato de valor usado nos exemplos
 */
function detectarFormatoValor(exemploGasto: string, exemploReceita: string): string {
  const exemplos = [exemploGasto, exemploReceita].filter((ex) => ex.length > 0)
  const texto = exemplos.join(' ').toLowerCase()

  // Verificar formatos comuns
  if (texto.includes('r$')) return 'r$'
  if (texto.includes('reais')) return 'reais'

  // Verificar formato num√©rico (com v√≠rgula, ponto, etc)
  if (texto.match(/\d+,\d{2}/)) return 'virgula'
  if (texto.match(/\d+\.\d{2}/)) return 'ponto'

  return 'numerico'
}

/**
 * Detecta a posi√ß√£o do valor na mensagem
 */
function detectarPosicaoValor(exemploGasto: string, exemploReceita: string): string {
  const exemplos = [exemploGasto, exemploReceita].filter((ex) => ex.length > 0)

  for (const exemplo of exemplos) {
    const palavras = exemplo.split(' ')

    // Procura por "R$" ou n√∫meros
    for (let i = 0; i < palavras.length; i++) {
      if (palavras[i].toLowerCase().includes('r$') || palavras[i].match(/\d+/)) {
        if (i <= 1) return 'inicio'
        if (i >= palavras.length - 2) return 'fim'
        return 'meio'
      }
    }
  }

  return 'indeterminado'
}

/**
 * Detecta se o usu√°rio inclui data nos exemplos
 */
function detectarUsoData(exemploGasto: string, exemploReceita: string): boolean {
  const exemplos = [exemploGasto, exemploReceita].filter((ex) => ex.length > 0)
  const texto = exemplos.join(' ').toLowerCase()

  // Verificar formatos de data comuns
  const regexData = /\d{1,2}[\/\-\.]\d{1,2}([\/\-\.]\d{2,4})?/

  // Verificar men√ß√µes a tempo
  const palavrasTempo = ['hoje', 'ontem', 'anteontem', 'semana passada', 'm√™s passado']

  return regexData.test(texto) || palavrasTempo.some((p) => texto.includes(p))
}

/**
 * Extrai palavras-chave potenciais dos exemplos
 */
function extrairPalavrasChave(exemploGasto: string, exemploReceita: string): string[] {
  const exemplos = [exemploGasto, exemploReceita].filter((ex) => ex.length > 0)
  const texto = exemplos.join(' ').toLowerCase()

  // Remover palavras comuns e focar em substantivos e verbos espec√≠ficos
  const palavrasIgnoradas = [
    'o',
    'a',
    'os',
    'as',
    'de',
    'da',
    'do',
    'das',
    'dos',
    'em',
    'no',
    'na',
    'para',
    'por',
    'com',
    'r$',
    'rs',
    'reais'
  ]

  const palavras = texto
    .replace(/[^\w\s]/gi, ' ')
    .split(/\s+/)
    .filter((p) => p.length > 3 && !palavrasIgnoradas.includes(p) && isNaN(Number(p)))
    .filter((v, i, a) => a.indexOf(v) === i) // unique

  return palavras.slice(0, 5) // Retornar at√© 5 palavras-chave
}

/**
 * Obt√©m um √≠cone padr√£o para uma categoria
 */
function obterIconePadrao(nomeCategoria: string): string {
  const nomeLower = nomeCategoria.toLowerCase()

  // Mapeamento de palavras-chave para √≠cones
  const icones = {
    aliment: 'üçΩÔ∏è',
    comida: 'üçΩÔ∏è',
    restaurante: 'üçΩÔ∏è',
    mercado: 'üõí',
    transport: 'üöó',
    uber: 'üöó',
    taxi: 'üöï',
    moradia: 'üè†',
    casa: 'üè†',
    aluguel: 'üè†',
    saude: '‚öïÔ∏è',
    medic: 'üíä',
    hospital: 'üè•',
    lazer: 'üé¨',
    cinema: 'üé¨',
    viagem: '‚úàÔ∏è',
    educac: 'üìö',
    escola: 'üè´',
    curso: 'üìö',
    livro: 'üìö',
    marketing: 'üì¢',
    anuncio: 'üì£',
    publicidade: 'üì£',
    software: 'üíª',
    assinatura: 'üì±',
    material: 'üì¶',
    escritorio: 'üñäÔ∏è',
    imposto: 'üìë',
    taxa: 'üìë',
    servico: 'üîß',
    venda: 'üí∞',
    receita: 'üí∏',
    salario: 'üíº',
    freelance: 'üî®',
    cliente: 'üë•',
    comiss: 'üíπ'
  }

  // Procurar a correspond√™ncia mais pr√≥xima
  for (const [chave, icone] of Object.entries(icones)) {
    if (nomeLower.includes(chave)) {
      return icone
    }
  }

  // √çcones padr√£o por tipo
  if (nomeLower.includes('pj')) return 'üíº'
  if (nomeLower.includes('pf')) return 'üë§'

  return 'üìã' // √çcone gen√©rico
}

/**
 * Salva as prefer√™ncias do usu√°rio no banco de dados
 */
async function salvarPreferenciasUsuario(usuarioId: number, preferencias: any): Promise<void> {
  // Em uma implementa√ß√£o real, salvar√≠amos no banco de dados
  console.log(`Salvando prefer√™ncias do usu√°rio ${usuarioId}:`, preferencias)

  // Simular sucesso
  return Promise.resolve()
}

/**
 * Traduz o modo de aprendizado para texto amig√°vel
 */
function traduzirModoAprendizado(modo: string): string {
  switch (modo) {
    case 'assistido':
      return 'Assistido (confirmar antes de salvar)'
    case 'automatico':
      return 'Autom√°tico (classifica√ß√£o inteligente)'
    case 'hibrido':
      return 'H√≠brido (confirmar apenas quando necess√°rio)'
    default:
      return 'Padr√£o'
  }
}
