// server/api/utils/input-validator.ts
import { extrairValor, extrairData } from './extrator'
import configJson from '../../../config/keywords.json'

/**
 * Interface para os dados extra√≠dos de uma mensagem
 */
interface InputData {
  isValid: boolean
  descricao: string
  valor: number
  data: Date
  erro?: string
}

export function verificarPalavrasChave(descricao: string): boolean {
  // Combina todas as palavras-chave conhecidas
  const todasPalavrasChave = [
    ...configJson.classificacao.palavrasChavePJ,
    ...configJson.classificacao.palavrasChavePF,
    ...configJson.classificacao.palavrasChaveGanhosPJ,
    ...configJson.classificacao.palavrasChaveGanhosPF
  ].map((palavra) => palavra.toLowerCase())

  // Normaliza e separa a descri√ß√£o em palavras
  const palavrasDescricao = descricao
    .toLowerCase()
    .replace(/[.,\/#!$%\^&\*;:{}=\-_`~()]/g, '')
    .split(/\s+/)

  // Verifica se pelo menos uma palavra da descri√ß√£o est√° nas palavras-chave
  return palavrasDescricao.some((palavra) =>
    todasPalavrasChave.some(
      (palavraChave) => palavraChave.includes(palavra) || palavra.includes(palavraChave)
    )
  )
}

/**
 * Valida e extrai dados de uma mensagem no formato:
 * nome/descri√ß√£o + valor monet√°rio + data (opcional)
 *
 * @param mensagem A mensagem a ser validada e processada
 * @returns Objeto com os dados extra√≠dos e flag de valida√ß√£o
 */
export function validarEExtrairDados(mensagem: string): InputData {
  // Padronizar a mensagem
  const mensagemNormalizada = mensagem

  // Verificar se a mensagem est√° vazia
  if (!mensagemNormalizada) {
    return {
      isValid: false,
      descricao: '',
      valor: 0,
      data: new Date(),
      erro: 'Mensagem vazia'
    }
  }

  // Extrair o valor monet√°rio
  const valor = extrairValor(mensagemNormalizada)
  console.log(valor)

  // Se n√£o encontrou valor monet√°rio, a mensagem √© inv√°lida
  if (valor === 0) {
    return {
      isValid: false,
      descricao: mensagemNormalizada,
      valor: 0,
      data: new Date(),
      erro: 'Valor monet√°rio n√£o encontrado. Por favor, inclua um valor com R$.'
    }
  }

  // Extrair a data (se presente)
  const data = extrairData(mensagemNormalizada)

  // Extrair a descri√ß√£o (tudo que n√£o √© valor monet√°rio ou data)
  let descricao = mensagemNormalizada
    // Remover o valor monet√°rio (formato R$ X.XXX,XX)
    .replace(/r\$\s*\d{1,4}(?:[.,]\d{3})*(?:[.,]\d{1,2})?/i, '')
    // Remover o valor monet√°rio (outros formatos)
    .replace(/\d{1,4}(?:[.,]\d{3})*(?:[.,]\d{1,2})?/g, '')
    // Remover formatos de data (DD/MM/YYYY, DD/MM, etc)
    .replace(/\d{1,2}[\/\-]\d{1,2}(?:[\/\-]\d{2,4})?/g, '')
    .trim()

  // Se n√£o sobrou nada na descri√ß√£o, √© inv√°lido
  if (!descricao) {
    return {
      isValid: false,
      descricao: '',
      valor,
      data,
      erro: 'Descri√ß√£o/nome n√£o encontrado. Por favor, informe o que est√° registrando.'
    }
  }

  // Tudo validado corretamente
  return {
    isValid: true,
    descricao,
    valor,
    data
  }
}

/**
 * Gera uma mensagem de erro amig√°vel para inputs inv√°lidos
 */
export function gerarMensagemErroInput(resultado: InputData): string {
  let mensagem = '‚ùå ' + (resultado.erro || 'Formato inv√°lido.')

  mensagem += '\n\nüìù Por favor, use o formato: "Descri√ß√£o R$ Valor [DD/MM]"'
  mensagem += '\n\nExemplos:'
  mensagem += '\n‚úÖ "Almo√ßo com cliente R$ 50"'
  mensagem += '\n‚úÖ "Recebi R$ 1000 do cliente ABC"'
  mensagem += '\n‚úÖ "Compra supermercado R$ 230,50 12/04"'

  return mensagem
}
