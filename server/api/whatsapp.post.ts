import { defineEventHandler, readBody } from 'h3'
import { classifyExpense, classifyIncome } from './utils/openai'
import { formatarData } from './utils/extrator'
import { validarEExtrairDados, gerarMensagemErroInput } from './utils/input-validator'
import { detectIsIncome, detectContext } from './utils/message-detector'
import { SheetManager } from './utils/sheets-manager'
import { findUser } from '../../db/users'

export default defineEventHandler(async (event) => {
  try {
    // Obter dados da requisi√ß√£o
    const body = await readBody(event)
    const { Body: message, From: phoneNumber } = body
    console.log('Recebido de:', phoneNumber)
    console.log('Mensagem:', message)

    // Verificar e processar usu√°rio
    const user = await findUser(phoneNumber)

    // Se usu√°rio n√£o existe, iniciar onboarding
    if (!user) {
      return onboardingMessage('empresario_individual') // default para novos usu√°rios
    }

    // Verifica se √© um comando especial (come√ßa com !)
    if (message.trim().startsWith('!')) {
      return await processarComando(message, phoneNumber, user)
    }

    // Verificar se √© uma resposta para uma classifica√ß√£o
    // Usando uma abordagem simplificada: verificar por n√∫meros (1, 2) ou prefixo "categoria:"
    if (
      message.trim() === '1' ||
      message.trim() === '2' ||
      message.toLowerCase().startsWith('categoria:')
    ) {
      return `
        <Response>
          <Message>‚ùì Por favor, digite sua transa√ß√£o completa no formato:
"Descri√ß√£o R$ valor [data]"

Exemplos:
- "Almo√ßo com cliente R$ 50"
- "Recebi R$ 1000 do cliente"</Message>
        </Response>
      `
    }

    // Validar e extrair os dados da mensagem
    const dadosInput = validarEExtrairDados(message)

    // Se a mensagem for inv√°lida, retornar um erro amig√°vel
    if (!dadosInput.isValid) {
      return `
        <Response>
          <Message>${gerarMensagemErroInput(dadosInput)}</Message>
        </Response>
      `
    }

    // Usando os dados validados
    const { descricao, valor, data } = dadosInput
    const dataFormatada = formatarData(data)

    console.log('Descri√ß√£o extra√≠da:', descricao)
    console.log('Valor extra√≠do:', valor)
    console.log('Data extra√≠da:', dataFormatada)

    // Detectar se √© ganho ou gasto baseado em palavras-chave
    const isIncome = detectIsIncome(message)

    try {
      // Classificar como ganho ou gasto dependendo da detec√ß√£o inicial
      if (isIncome) {
        // Processo para ganhos/receitas
        const classification = await classifyIncome(message, user.perfil)
        console.log('Classifica√ß√£o de ganho:', classification)

        // Tentativa de classifica√ß√£o autom√°tica mesmo com baixa confian√ßa
        // Detec√ß√£o de contexto para ajudar
        if (classification.status === 'ERROR' || classification.status === 'LOW_CONFIDENCE') {
          // Tentar determinar o tipo via detector de contexto
          const contextoDetectado = detectContext(message)

          // Se for poss√≠vel inferir o tipo (PJ ou PF)
          if (contextoDetectado !== 'INDEFINIDO') {
            // Atualizar a classifica√ß√£o com o contexto detectado
            classification.tipo = contextoDetectado
            classification.categoria =
              contextoDetectado === 'PJ' ? 'Receita Empresarial' : 'Receita Pessoal'
            classification.fonte = contextoDetectado === 'PJ' ? 'Cliente' : 'Geral'
            classification.probabilidade = 0.7 // Classifica√ß√£o de m√©dia confian√ßa
            classification.status = 'SUCCESS'

            // Processar com a classifica√ß√£o melhorada
            return await processIncomeSuccess(classification, descricao, valor, dataFormatada, user)
          }

          if (contextoDetectado === 'INDEFINIDO') {
            return `        <Response>
          <Message>Por favor, insira uma mensagem dentro do contexto do Finia.</Message>
        </Response>`
          }

          // Se n√£o foi poss√≠vel detectar o contexto, usamos a classifica√ß√£o sugerida
          // Mesmo com baixa confian√ßa, tentamos dar uma resposta √∫til
          classification.status = 'SUCCESS' // For√ßar sucesso

          // Incluir mensagem sobre a classifica√ß√£o autom√°tica
          return await processIncomeSuccess(
            classification,
            descricao,
            valor,
            dataFormatada,
            user,
            true // flag indicando baixa confian√ßa
          )
        }

        // Processamento de receita com classifica√ß√£o confi√°vel
        return await processIncomeSuccess(classification, descricao, valor, dataFormatada, user)
      } else {
        // Processo para gastos/despesas
        const classification = await classifyExpense(message, user.perfil)
        console.log('Classifica√ß√£o de gasto:', classification)

        // Tentativa de classifica√ß√£o autom√°tica mesmo com baixa confian√ßa
        if (classification.status === 'ERROR' || classification.status === 'LOW_CONFIDENCE') {
          // Tentar determinar o tipo via detector de contexto
          const contextoDetectado = detectContext(message)

          // Se for poss√≠vel inferir o tipo (PJ ou PF)
          if (contextoDetectado !== 'INDEFINIDO') {
            // Atualizar a classifica√ß√£o com o contexto detectado
            classification.tipo = contextoDetectado
            classification.categoria =
              contextoDetectado === 'PJ' ? 'Despesa Empresarial' : 'Despesa Pessoal'
            classification.probabilidade = 0.7 // Classifica√ß√£o de m√©dia confian√ßa
            classification.status = 'SUCCESS'

            // Processar com a classifica√ß√£o melhorada
            return await processExpenseSuccess(
              classification,
              descricao,
              valor,
              dataFormatada,
              user
            )
          }

          if (contextoDetectado === 'INDEFINIDO') {
            return `        <Response>
          <Message>Por favor, insira uma mensagem dentro do contexto do Finia.</Message>
        </Response>`
          }

          // Se n√£o foi poss√≠vel detectar o contexto, usamos a classifica√ß√£o sugerida
          // Mesmo com baixa confian√ßa, tentamos dar uma resposta √∫til
          classification.status = 'SUCCESS' // For√ßar sucesso

          // Incluir mensagem sobre a classifica√ß√£o autom√°tica
          return await processExpenseSuccess(
            classification,
            descricao,
            valor,
            dataFormatada,
            user,
            true // flag indicando baixa confian√ßa
          )
        }

        // Processamento de gasto com classifica√ß√£o confi√°vel
        return await processExpenseSuccess(classification, descricao, valor, dataFormatada, user)
      }
    } catch (error) {
      console.error('Erro na classifica√ß√£o:', error)
      return `
        <Response>
          <Message>‚ùå Ocorreu um erro ao processar sua mensagem. Por favor, tente novamente com uma descri√ß√£o clara.</Message>
        </Response>
      `
    }
  } catch (error) {
    console.error('Erro no processamento:', error)
    return `
      <Response>
        <Message>‚ùå Ocorreu um erro ao processar sua mensagem. 
Verifique o formato e tente novamente.
Exemplo: "Almo√ßo R$ 50" ou "Recebi R$ 1000 do cliente"</Message>
      </Response>
    `
  }
})

// Fun√ß√£o para processar um gasto classificado com sucesso
async function processExpenseSuccess(
  classification,
  descricao,
  valor,
  dataFormatada,
  user,
  lowConfidence = false
) {
  // Extrair informa√ß√µes relevantes
  const { tipo, categoria, natureza, probabilidade } = classification

  // Configurar mensagem de acordo com o perfil e classifica√ß√£o
  let mensagemResposta

  // Aqui voc√™ integraria com SheetManager para salvar o gasto
  // const sheetManager = new SheetManager(user.spreadsheet_id);
  // await sheetManager.adicionarGasto(tipo, new Date(dataFormatada), descricao, valor, categoria);

  const lowConfidenceMessage = lowConfidence
    ? '\n\n‚ö†Ô∏è *Classifica√ß√£o autom√°tica* - Se desejar alterar, registre novamente com mais detalhes.'
    : ''

  if (user.perfil === 'pessoa_fisica') {
    mensagemResposta = `
    üé¨ *Seu gasto foi salvo na planilha!*
    üìå Categoria: ${categoria}
    üí∞ Valor: R$ ${valor.toFixed(2)}
    üìÖ Data: ${dataFormatada}
    üîç Descri√ß√£o: ${descricao}
    
    üí° Obrigado por registrar seu gasto conosco!${lowConfidenceMessage}
    `
  } else {
    // dual ou empresario_individual
    if (tipo === 'PJ') {
      mensagemResposta = `
      ‚úÖ *Salvo como GASTO EMPRESARIAL (PJ)!*
      üìå Categoria: ${categoria}
      üí∞ Valor: R$ ${valor.toFixed(2)}
      üìÖ Data: ${dataFormatada}
      üîç Descri√ß√£o: ${descricao}
      üìä **Dica fiscal**: Guarde a nota fiscal para dedu√ß√£o de impostos.${lowConfidenceMessage}
      `
    } else {
      mensagemResposta = `
      üè† *Salvo como GASTO PESSOAL (PF)!*
      üìå Categoria: ${categoria}
      üí∞ Valor: R$ ${valor.toFixed(2)}
      üìÖ Data: ${dataFormatada}
      üîç Descri√ß√£o: ${descricao}
      
      üí° Este m√™s voc√™ j√° gastou R$ X nesta categoria.${lowConfidenceMessage}
      `
    }
  }

  return `
    <Response>
      <Message>${mensagemResposta.trim()}</Message>
    </Response>
  `
}

// Fun√ß√£o para processar uma receita classificada com sucesso
async function processIncomeSuccess(
  classification,
  descricao,
  valor,
  dataFormatada,
  user,
  lowConfidence = false
) {
  // Extrair informa√ß√µes relevantes
  const { tipo, categoria, fonte, probabilidade } = classification

  // Configurar mensagem de acordo com o perfil e classifica√ß√£o
  let mensagemResposta

  // Aqui voc√™ integraria com SheetManager para salvar a receita
  // const sheetManager = new SheetManager(user.spreadsheet_id);
  // await sheetManager.adicionarGanho(tipo, new Date(dataFormatada), descricao, valor, categoria);

  const lowConfidenceMessage = lowConfidence
    ? '\n\n‚ö†Ô∏è *Classifica√ß√£o autom√°tica* - Se desejar alterar, registre novamente com mais detalhes.'
    : ''

  if (user.perfil === 'pessoa_fisica') {
    mensagemResposta = `
    üí∞ *Receita registrada com sucesso!*
    üìå Categoria: ${categoria}
    üíµ Valor: R$ ${valor.toFixed(2)}
    üìÖ Data: ${dataFormatada}
    üîç Descri√ß√£o: ${descricao}
    üìã Fonte: ${fonte || 'N√£o especificada'}
    
    üéâ √ìtimo trabalho! Continue acompanhando suas finan√ßas.${lowConfidenceMessage}
    `
  } else {
    // dual ou empresario_individual
    if (tipo === 'PJ') {
      mensagemResposta = `
      üíº *Receita EMPRESARIAL (PJ) registrada!*
      üìå Categoria: ${categoria}
      üíµ Valor: R$ ${valor.toFixed(2)}
      üìÖ Data: ${dataFormatada}
      üîç Descri√ß√£o: ${descricao}
      üè¢ Fonte: ${fonte || 'Cliente'}
      
      üí° **Dica fiscal**: Lembre-se de emitir a nota fiscal correspondente.${lowConfidenceMessage}
      `
    } else {
      mensagemResposta = `
      üë§ *Receita PESSOAL (PF) registrada!*
      üìå Categoria: ${categoria}
      üíµ Valor: R$ ${valor.toFixed(2)}
      üìÖ Data: ${dataFormatada}
      üîç Descri√ß√£o: ${descricao}
      üìã Fonte: ${fonte || 'N√£o especificada'}
      
      üéâ Parab√©ns pelo ganho! Continue acompanhando suas finan√ßas.${lowConfidenceMessage}
      `
    }
  }

  return `
    <Response>
      <Message>${mensagemResposta.trim()}</Message>
    </Response>
  `
}

function onboardingMessage(profile: string) {
  let messageOnboarding

  if (profile === 'empresario_individual') {
    messageOnboarding = `
    üåü *Bem-vindo ao Finia - Modo Dual!* üíº
    
    Ol√°, empreendedor! Sou seu assistente financeiro completo. üìä
    
    Ajudo voc√™ a separar e gerenciar:
    ‚úÖ Gastos Pessoais (PF)
    ‚úÖ Gastos Empresariais (PJ)
    ‚úÖ Receitas Pessoais e Profissionais
    
    *Como funciona?*
    
    üìù Para registrar GASTOS, simplesmente descreva:
    - "Almo√ßo com cliente R$ 120" (PJ)
    - "Cinema com fam√≠lia R$ 80" (PF)
    
    üí∞ Para registrar RECEITAS, use termos como:
    - "Recebi R$ 2000 do cliente ABC pelo projeto" (PJ)
    - "Recebi sal√°rio de R$ 3000 hoje" (PF)
    
    Classificarei automaticamente entre pessoal e empresarial! üöÄ
    
    D√∫vidas? Digite *!ajuda*
        `
  }

  if (profile === 'pessoa_fisica') {
    messageOnboarding = `
    üåü *Bem-vindo ao Finia!* üí∞
    
    Ol√°! Sou seu assistente financeiro pessoal no WhatsApp. üì±
    
    Vou te ajudar a controlar seus gastos e receitas de forma simples:
    
    ‚úÖ Registre gastos com facilidade:
    - "Mercado R$ 250"
    - "Uber R$ 35"
    
    ‚úÖ Registre receitas facilmente:
    - "Recebi sal√°rio R$ 3000"
    - "Ganhei R$ 500 de freelance"
    
    Estou aqui para te ajudar a ter mais controle financeiro! üí∏
    
    D√∫vidas? Digite *!ajuda*
        `
  }

  return `
        <Response>
        <Message>${messageOnboarding?.trim()}</Message>
      </Response>
      `
}

// Fun√ß√£o para processar comandos especiais
async function processarComando(comando: string, telefone: string, user: any) {
  try {
    // Remover o ! inicial e dividir em partes
    const partes = comando.substring(1).split(' ')
    const acao = partes[0].toLowerCase()

    if (acao === 'relatorio' || acao === 'relat√≥rio') {
      // Obter m√™s e ano para o relat√≥rio
      const mes = partes[1] || obterMesAtual()
      const ano = partes[2] || new Date().getFullYear().toString()

      console.log(`Processando comando de relat√≥rio para ${mes}/${ano}`)

      // Enviar para a fun√ß√£o de gera√ß√£o de relat√≥rio
      return await gerarEEnviarRelatorio(telefone, mes, ano, user)
    } else if (acao === 'ajuda') {
      return `
      <Response>
        <Message>*üìö Ajuda do Finia*

*Formato correto*:
- "Descri√ß√£o/nome + R$ valor + [data opcional]"

*Exemplos*:
- "Almo√ßo R$ 50"
- "Uber R$ 35 12/04"
- "Recebi do cliente ABC R$ 2000"
- "Pagamento freelance R$ 500 04/04"

*Comandos dispon√≠veis*:
!relatorio [m√™s] [ano] - Gera relat√≥rio financeiro
!ajuda - Mostra esta mensagem de ajuda

*Dicas*:
- Para melhor classifica√ß√£o, seja espec√≠fico:
  - Para gastos/receitas PJ: mencione "cliente", "empresa", "projeto"
  - Para gastos/receitas PF: use "pessoal", "casa", "fam√≠lia"
- Se a classifica√ß√£o autom√°tica n√£o for correta, registre novamente com mais detalhes.
        </Message>
      </Response>
      `
    } else if (acao === 'corrigir') {
      return `
      <Response>
        <Message>Para corrigir um registro, por favor, insira-o novamente com mais detalhes para garantir uma classifica√ß√£o correta.

Exemplo: "Almo√ßo de trabalho com cliente ABC R$ 120 (PJ)"
        </Message>
      </Response>
      `
    }

    // Comando n√£o reconhecido
    console.log('Comando n√£o reconhecido:', comando)
    return `
     <Response>
       <Message>‚ùì Comando n√£o reconhecido. Digite !ajuda para ver os comandos dispon√≠veis.</Message>
     </Response>
   `
  } catch (error) {
    console.error('Erro ao processar comando:', error)
    return `
     <Response>
       <Message>‚ùå Ocorreu um erro ao processar seu comando. Por favor, tente novamente.</Message>
     </Response>
   `
  }
}

// Fun√ß√£o helper para obter o nome do m√™s atual
function obterMesAtual() {
  const meses = [
    'janeiro',
    'fevereiro',
    'mar√ßo',
    'abril',
    'maio',
    'junho',
    'julho',
    'agosto',
    'setembro',
    'outubro',
    'novembro',
    'dezembro'
  ]
  return meses[new Date().getMonth()]
}

// Placeholder para a fun√ß√£o de gera√ß√£o de relat√≥rio
async function gerarEEnviarRelatorio(telefone: string, mes: string, ano: string, user: any) {
  // Esta √© uma vers√£o simplificada - voc√™ precisar√° implementar a l√≥gica completa
  return `
    <Response>
      <Message>üìä Relat√≥rio de ${mes}/${ano} solicitado. Estamos gerando e enviaremos em breve!</Message>
    </Response>
  `
}
