import { defineEventHandler, readBody } from 'h3'
import { classifyTransaction } from './utils/openai'
import { formatarData } from './utils/extrator'
import { validarEExtrairDados, gerarMensagemErroInput } from './utils/input-validator'
import { detectContext } from './utils/message-detector'
import { SheetManager } from './utils/sheets-manager'
import { findUser } from '../../db/users'
import {
  contemMultiplasTransacoes,
  extrairMultiplasTransacoes,
  Transacao
} from './utils/multi-value-processor'

export default defineEventHandler(async (event) => {
  try {
    const body = await readBody(event)
    const { Body: message, From: phoneNumber } = body
    console.log('Recebido de:', phoneNumber)
    console.log('Mensagem:', message)

    const user = await findUser(phoneNumber)

    if (!user) {
      return onboardingMessage('empresario_individual')
    }

    if (message.trim().startsWith('!')) {
      return await processarComando(message, phoneNumber, user)
    }

    if (
      message.trim() === '1' ||
      message.trim() === '2' ||
      message.toLowerCase().startsWith('categoria:')
    ) {
      return `
        <Response>
          <Message>‚ùì Por favor, digite sua transa√ß√£o completa no formato:
"Descri√ß√£o R$ valor [data]"

Exemplos:
- "Almo√ßo com cliente R$ 50"
- "Recebi R$ 1000 do cliente ABC"</Message>
        </Response>
      `
    }

    if (contemMultiplasTransacoes(message)) {
      return await processarMultiplasTransacoes(message, user)
    }

    const dadosInput = validarEExtrairDados(message)

    if (!dadosInput.isValid) {
      return `
        <Response>
          <Message>${gerarMensagemErroInput(dadosInput)}</Message>
        </Response>
      `
    }

    const { descricao, valor, data } = dadosInput
    const dataFormatada = formatarData(data)

    console.log('Descri√ß√£o extra√≠da:', descricao)
    console.log('Valor extra√≠do:', valor)
    console.log('Data extra√≠da:', dataFormatada)

    try {
      // Classifica√ß√£o unificada via IA
      const classification = await classifyTransaction(message, user.perfil)
      console.log('Classifica√ß√£o da transa√ß√£o:', classification)

      if (classification.status === 'SUCCESS') {
        // Processamento baseado na natureza da transa√ß√£o (GASTO ou GANHO)
        if (classification.natureza === 'GASTO') {
          return await processExpenseSuccess(classification, descricao, valor, dataFormatada, user)
        } else if (classification.natureza === 'GANHO') {
          return await processIncomeSuccess(classification, descricao, valor, dataFormatada, user)
        }
      }

      // Se a IA n√£o conseguiu classificar com alta confian√ßa
      const contextoDetectado = detectContext(message)

      // Tentar extrair poss√≠vel origem/contexto
      const extractedInfo = extractExpenseInfo(message)
      const origemDetectada = extractedInfo.origin || 'N√£o especificada'

      if (contextoDetectado !== 'INDEFINIDO') {
        // Verificar palavras-chave para determinar se √© receita ou despesa
        if (
          message.toLowerCase().includes('recebi') ||
          message.toLowerCase().includes('ganho') ||
          message.toLowerCase().includes('sal√°rio') ||
          message.toLowerCase().includes('pagamento')
        ) {
          // Parece ser uma receita
          const fallbackClassification = {
            natureza: 'GANHO',
            tipo: contextoDetectado,
            categoria: contextoDetectado === 'PJ' ? 'Receita Empresarial' : 'Receita Pessoal',
            origem: origemDetectada,
            probabilidade: 0.6,
            status: 'SUCCESS'
          }
          return await processIncomeSuccess(
            fallbackClassification,
            descricao,
            valor,
            dataFormatada,
            user,
            true
          )
        } else {
          // Assume-se que √© uma despesa (caso mais comum)
          const fallbackClassification = {
            natureza: 'GASTO',
            tipo: contextoDetectado,
            categoria: contextoDetectado === 'PJ' ? 'Despesa Empresarial' : 'Despesa Pessoal',
            origem: origemDetectada,
            probabilidade: 0.6,
            status: 'SUCCESS'
          }
          return await processExpenseSuccess(
            fallbackClassification,
            descricao,
            valor,
            dataFormatada,
            user,
            true
          )
        }
      }

      // Caso realmente n√£o consigamos classificar
      return `
        <Response>
          <Message>‚ö†Ô∏è N√£o consegui classificar sua transa√ß√£o com certeza.
          
Por favor, reescreva incluindo palavras mais espec√≠ficas como:
- Para gastos empresariais: cliente, fornecedor, empresa, escrit√≥rio
- Para gastos pessoais: casa, mercado, pessoal, fam√≠lia 
- Para receitas: pagamento, recebi, sal√°rio, freelance

Exemplo: "Almo√ßo com cliente R$ 120" ou "Mercado para casa R$ 250"</Message>
        </Response>
      `
    } catch (error) {
      console.error('Erro na classifica√ß√£o:', error)
      return `
        <Response>
          <Message>‚ùå Ocorreu um erro ao processar sua mensagem. Por favor, tente novamente com uma descri√ß√£o clara.</Message>
        </Response>
      `
    }
  } catch (error) {
    console.error('Erro no processamento:', error)
    return `
      <Response>
        <Message>‚ùå Ocorreu um erro ao processar sua mensagem. 
Verifique o formato e tente novamente.
Exemplo: "Almo√ßo R$ 50" ou "Recebi R$ 1000 do cliente"</Message>
      </Response>
    `
  }
})

async function processarMultiplasTransacoes(message: string, user: any) {
  try {
    const transacoes = extrairMultiplasTransacoes(message)

    if (transacoes.length === 0) {
      return `
        <Response>
          <Message>‚ùå N√£o consegui identificar transa√ß√µes v√°lidas na sua mensagem. 
Por favor, verifique o formato e tente novamente.
Exemplo: "Almo√ßo R$ 50" ou "Recebi R$ 1000 do cliente"</Message>
        </Response>
      `
    }

    const transacoesClassificadas = []

    for (const transacao of transacoes) {
      try {
        // Classifica√ß√£o unificada com a nova fun√ß√£o
        const classification = await classifyTransaction(transacao.textoOriginal, user.perfil)

        if (classification.status === 'SUCCESS') {
          // Classifica√ß√£o com sucesso
          transacoesClassificadas.push({
            ...transacao,
            tipo: classification.tipo,
            categoria: classification.categoria,
            origem: classification.origem || 'N√£o especificada',
            natureza: classification.natureza === 'GASTO' ? 'despesa' : 'receita'
          })
        } else {
          // Classifica√ß√£o com baixa confian√ßa, tenta usar o contexto
          const contextoDetectado = detectContext(transacao.textoOriginal)

          // Tentar extrair poss√≠vel origem/contexto
          const extractedInfo = extractExpenseInfo(transacao.textoOriginal)
          const origemDetectada = extractedInfo.origin || 'N√£o especificada'

          if (contextoDetectado !== 'INDEFINIDO') {
            // Verificar palavras-chave para determinar se √© receita ou despesa
            const textoLower = transacao.textoOriginal.toLowerCase()
            const pareceReceita =
              textoLower.includes('recebi') ||
              textoLower.includes('ganho') ||
              textoLower.includes('sal√°rio') ||
              textoLower.includes('pagamento')

            transacoesClassificadas.push({
              ...transacao,
              tipo: contextoDetectado,
              categoria:
                contextoDetectado === 'PJ'
                  ? pareceReceita
                    ? 'Receita Empresarial'
                    : 'Despesa Empresarial'
                  : pareceReceita
                    ? 'Receita Pessoal'
                    : 'Despesa Pessoal',
              origem: origemDetectada,
              natureza: pareceReceita ? 'receita' : 'despesa',
              confiancaBaixa: true
            })
          } else {
            // N√£o conseguimos classificar de forma alguma
            transacoesClassificadas.push({
              ...transacao,
              tipo: 'INDEFINIDO',
              categoria: 'N√£o Classificado',
              origem: origemDetectada,
              natureza: 'indefinido',
              confiancaBaixa: true
            })
          }
        }
      } catch (error) {
        console.error('Erro ao processar transa√ß√£o:', error)
      }
    }

    // Removida a inicializa√ß√£o do SheetManager e o armazenamento na planilha
    let totalPJ = 0
    let totalPF = 0
    let countPJ = 0
    let countPF = 0

    // Calculando os totais sem salvar na planilha
    for (const transacao of transacoesClassificadas) {
      if (transacao.tipo === 'PJ') {
        totalPJ += transacao.valor
        countPJ++
      } else if (transacao.tipo === 'PF') {
        totalPF += transacao.valor
        countPF++
      }
    }

    let resumoMensagem = `‚úÖ *${transacoesClassificadas.length} transa√ß√µes processadas com sucesso!*\n\n`

    if (countPJ > 0) {
      resumoMensagem += `üíº *PJ:* ${countPJ} itens totalizando R$ ${totalPJ.toFixed(2)}\n`
    }

    if (countPF > 0) {
      resumoMensagem += `üë§ *PF:* ${countPF} itens totalizando R$ ${totalPF.toFixed(2)}\n`
    }

    resumoMensagem += `\nüìù *Detalhes:*\n`

    const transacoesExibidas = transacoesClassificadas.slice(0, 5)

    for (const [index, transacao] of transacoesExibidas.entries()) {
      const tipoIcon = transacao.tipo === 'PJ' ? 'üíº' : 'üë§'
      const naturezaIcon = transacao.natureza === 'receita' ? 'üí∞' : 'üí∏'

      resumoMensagem += `${index + 1}. ${tipoIcon} ${naturezaIcon} "${transacao.descricao}" - R$ ${transacao.valor.toFixed(2)} (${transacao.categoria})\n`
      resumoMensagem += `   ‚îî Origem: ${transacao.origem}\n`
    }

    if (transacoesClassificadas.length > 5) {
      resumoMensagem += `...e mais ${transacoesClassificadas.length - 5} transa√ß√µes.\n`
    }

    resumoMensagem += '\n‚ö†Ô∏è Use !relatorio para ver todas as transa√ß√µes organizadas.'

    return `
      <Response>
        <Message>${resumoMensagem}</Message>
      </Response>
    `
  } catch (error) {
    console.error('Erro ao processar m√∫ltiplas transa√ß√µes:', error)
    return `
      <Response>
        <Message>‚ùå Ocorreu um erro ao processar suas transa√ß√µes. Por favor, tente novamente.</Message>
      </Response>
    `
  }
}

async function processExpenseSuccess(
  classification,
  descricao,
  valor,
  dataFormatada,
  user,
  lowConfidence = false
) {
  const { tipo, categoria, natureza, origem, probabilidade } = classification

  // Removida a inicializa√ß√£o do SheetManager e o armazenamento na planilha
  console.log(
    `Simulando salvamento de gasto: ${tipo}, ${dataFormatada}, ${descricao}, ${valor}, ${categoria}, Origem: ${origem || 'N√£o especificada'}`
  )

  const lowConfidenceMessage = lowConfidence
    ? '\n\n‚ö†Ô∏è *Classifica√ß√£o autom√°tica* - Se desejar alterar, registre novamente com mais detalhes.'
    : ''

  if (user.perfil === 'pessoa_fisica') {
    const mensagemResposta = `
    üé¨ *Seu gasto foi salvo na planilha!*
    üìå Categoria: ${categoria}
    üí∞ Valor: R$ ${valor.toFixed(2)}
    üìÖ Data: ${dataFormatada}
    üîç Descri√ß√£o: ${descricao}
    üè™ Origem: ${origem || 'N√£o especificada'}
    
    üí° Obrigado por registrar seu gasto conosco!${lowConfidenceMessage}
    `
    return `
      <Response>
        <Message>${mensagemResposta.trim()}</Message>
      </Response>
    `
  } else {
    if (tipo === 'PJ') {
      const mensagemResposta = `
      ‚úÖ *Salvo como GASTO EMPRESARIAL (PJ)!*
      üìå Categoria: ${categoria}
      üí∞ Valor: R$ ${valor.toFixed(2)}
      üìÖ Data: ${dataFormatada}
      üîç Descri√ß√£o: ${descricao}
      üè¢ Fornecedor: ${origem || 'N√£o especificado'}
      
      üìä **Dica fiscal**: Guarde a nota fiscal para dedu√ß√£o de impostos.${lowConfidenceMessage}
      `
      return `
        <Response>
          <Message>${mensagemResposta.trim()}</Message>
        </Response>
      `
    } else {
      const mensagemResposta = `
      üè† *Salvo como GASTO PESSOAL (PF)!*
      üìå Categoria: ${categoria}
      üí∞ Valor: R$ ${valor.toFixed(2)}
      üìÖ Data: ${dataFormatada}
      üîç Descri√ß√£o: ${descricao}
      üè™ Estabelecimento: ${origem || 'N√£o especificado'}
      
      üí° Gasto registrado com sucesso.${lowConfidenceMessage}
      `
      return `
        <Response>
          <Message>${mensagemResposta.trim()}</Message>
        </Response>
      `
    }
  }
}

async function processIncomeSuccess(
  classification,
  descricao,
  valor,
  dataFormatada,
  user,
  lowConfidence = false
) {
  const { tipo, categoria, origem, probabilidade } = classification

  // Removida a inicializa√ß√£o do SheetManager e o armazenamento na planilha
  console.log(
    `Simulando salvamento de ganho: ${tipo}, ${dataFormatada}, ${descricao}, ${valor}, ${categoria}, Origem: ${origem || 'N√£o especificada'}`
  )

  const lowConfidenceMessage = lowConfidence
    ? '\n\n‚ö†Ô∏è *Classifica√ß√£o autom√°tica* - Se desejar alterar, registre novamente com mais detalhes.'
    : ''

  if (user.perfil === 'pessoa_fisica') {
    // Removido c√°lculo do total da categoria
    const mensagemResposta = `
    üí∞ *Receita registrada com sucesso!*
    üìå Categoria: ${categoria}
    üíµ Valor: R$ ${valor.toFixed(2)}
    üìÖ Data: ${dataFormatada}
    üîç Descri√ß√£o: ${descricao}
    üìã Fonte: ${origem || 'N√£o especificada'}
    
    üéâ √ìtimo trabalho! Continue acompanhando suas finan√ßas.${lowConfidenceMessage}
    `
    return `
      <Response>
        <Message>${mensagemResposta.trim()}</Message>
      </Response>
    `
  } else {
    if (tipo === 'PJ') {
      const mensagemResposta = `
      üíº *Receita EMPRESARIAL (PJ) registrada!*
      üìå Categoria: ${categoria}
      üíµ Valor: R$ ${valor.toFixed(2)}
      üìÖ Data: ${dataFormatada}
      üîç Descri√ß√£o: ${descricao}
      üè¢ Cliente: ${origem || 'N√£o especificado'}
      
      üí° **Dica fiscal**: Lembre-se de emitir a nota fiscal correspondente.${lowConfidenceMessage}
      `
      return `
        <Response>
          <Message>${mensagemResposta.trim()}</Message>
        </Response>
      `
    } else {
      const mensagemResposta = `
      üë§ *Receita PESSOAL (PF) registrada!*
      üìå Categoria: ${categoria}
      üíµ Valor: R$ ${valor.toFixed(2)}
      üìÖ Data: ${dataFormatada}
      üîç Descri√ß√£o: ${descricao}
      üìã Fonte: ${origem || 'N√£o especificada'}
      
      üéâ Parab√©ns pelo ganho! Continue acompanhando suas finan√ßas.${lowConfidenceMessage}
      `
      return `
        <Response>
          <Message>${mensagemResposta.trim()}</Message>
        </Response>
      `
    }
  }
}

function onboardingMessage(profile: string) {
  let messageOnboarding

  if (profile === 'empresario_individual') {
    messageOnboarding = `
    üåü *Bem-vindo ao Finia - Modo Dual!* üíº
    
    Ol√°, empreendedor! Sou seu assistente financeiro completo. üìä
    
    Ajudo voc√™ a separar e gerenciar:
    ‚úÖ Gastos Pessoais (PF)
    ‚úÖ Gastos Empresariais (PJ)
    ‚úÖ Receitas Pessoais e Profissionais
    
    *Como funciona?*
    
    üìù Para registrar GASTOS, simplesmente descreva:
    - "Almo√ßo com cliente R$ 120" (PJ)
    - "Cinema com fam√≠lia R$ 80" (PF)
    
    üí∞ Para registrar RECEITAS, use termos como:
    - "Recebi R$ 2000 do cliente ABC pelo projeto" (PJ)
    - "Recebi sal√°rio de R$ 3000 hoje" (PF)
    
    Classificarei automaticamente entre pessoal e empresarial! üöÄ
    
    D√∫vidas? Digite *!ajuda*
        `
  }

  if (profile === 'pessoa_fisica') {
    messageOnboarding = `
    üåü *Bem-vindo ao Finia!* üí∞
    
    Ol√°! Sou seu assistente financeiro pessoal no WhatsApp. üì±
    
    Vou te ajudar a controlar seus gastos e receitas de forma simples:
    
    ‚úÖ Registre gastos com facilidade:
    - "Mercado R$ 250"
    - "Uber R$ 35"
    
    ‚úÖ Registre receitas facilmente:
    - "Recebi sal√°rio R$ 3000"
    - "Ganhei R$ 500 de freelance"
    
    Estou aqui para te ajudar a ter mais controle financeiro! üí∏
    
    D√∫vidas? Digite *!ajuda*
        `
  }

  return `
        <Response>
        <Message>${messageOnboarding?.trim()}</Message>
      </Response>
      `
}

async function processarComando(comando: string, telefone: string, user: any) {
  try {
    const partes = comando.substring(1).split(' ')
    const acao = partes[0].toLowerCase()

    if (acao === 'relatorio' || acao === 'relat√≥rio') {
      const mes = partes[1] || obterMesAtual()
      const ano = partes[2] || new Date().getFullYear().toString()

      console.log(`Processando comando de relat√≥rio para ${mes}/${ano}`)

      return await gerarEEnviarRelatorio(telefone, mes, ano, user)
    } else if (acao === 'ajuda') {
      return `
      <Response>
        <Message>*üìö Ajuda do Finia*

*Formato correto*:
- "Descri√ß√£o/nome + R$ valor + [data opcional]"

*Exemplos*:
- "Almo√ßo R$ 50"
- "Uber R$ 35 12/04"
- "Recebi do cliente ABC R$ 2000"
- "Pagamento freelance R$ 500 04/04"

*Comandos dispon√≠veis*:
!relatorio [m√™s] [ano] - Gera relat√≥rio financeiro
!ajuda - Mostra esta mensagem de ajuda

*Dicas*:
- Para melhor classifica√ß√£o, seja espec√≠fico:
  - Para gastos/receitas PJ: mencione "cliente", "empresa", "projeto"
  - Para gastos/receitas PF: use "pessoal", "casa", "fam√≠lia"
- Se a classifica√ß√£o autom√°tica n√£o for correta, registre novamente com mais detalhes.
        </Message>
      </Response>
      `
    } else if (acao === 'corrigir') {
      return `
      <Response>
        <Message>Para corrigir um registro, por favor, insira-o novamente com mais detalhes para garantir uma classifica√ß√£o correta.

Exemplo: "Almo√ßo de trabalho com cliente ABC R$ 120 (PJ)"
        </Message>
      </Response>
      `
    }

    console.log('Comando n√£o reconhecido:', comando)
    return `
     <Response>
       <Message>‚ùì Comando n√£o reconhecido. Digite !ajuda para ver os comandos dispon√≠veis.</Message>
     </Response>
   `
  } catch (error) {
    console.error('Erro ao processar comando:', error)
    return `
     <Response>
       <Message>‚ùå Ocorreu um erro ao processar seu comando. Por favor, tente novamente.</Message>
     </Response>
   `
  }
}

function obterMesAtual() {
  const meses = [
    'janeiro',
    'fevereiro',
    'mar√ßo',
    'abril',
    'maio',
    'junho',
    'julho',
    'agosto',
    'setembro',
    'outubro',
    'novembro',
    'dezembro'
  ]
  return meses[new Date().getMonth()]
}

async function gerarEEnviarRelatorio(telefone: string, mes: string, ano: string, user: any) {
  try {
    // Removida a inicializa√ß√£o do SheetManager
    console.log(`Simulando gera√ß√£o de relat√≥rio para ${mes}/${ano}`)

    return `
      <Response>
        <Message>üìä Relat√≥rio de ${mes}/${ano} solicitado. Estamos gerando e enviaremos em breve!</Message>
      </Response>
    `
  } catch (error) {
    console.error('Erro ao gerar relat√≥rio:', error)
    return `
      <Response>
        <Message>‚ùå Ocorreu um erro ao gerar seu relat√≥rio. Por favor, tente novamente mais tarde.</Message>
      </Response>
    `
  }
}

// Fun√ß√£o auxiliar melhorada para extrair informa√ß√µes b√°sicas
function extractExpenseInfo(message: string) {
  const valueRegex = /R\$\s?(\d+(?:[,.]\d+)?)/i
  const valueMatch = message.match(valueRegex)
  const value = valueMatch ? valueMatch[1] : '?'

  // Tentar extrair poss√≠vel origem/contexto
  let description = message.replace(valueRegex, '').trim()
  let origin = ''

  // Padr√µes comuns que indicam origem
  const originPatterns = [
    /\bde\s+([^,\.]+)/i, // "Recebi de Cliente ABC"
    /\bpara\s+([^,\.]+)/i, // "Pagamento para Fornecedor XYZ"
    /\bdo\s+([^,\.]+)/i, // "Dinheiro do Cliente"
    /\bda\s+([^,\.]+)/i, // "Pagamento da Empresa"
    /\bno\s+([^,\.]+)/i, // "Compra no Mercado"
    /\bem\s+([^,\.]+)/i, // "Jantar em Restaurante"
    /\bcom\s+([^,\.]+)/i // "Reuni√£o com Cliente"
  ]

  for (const pattern of originPatterns) {
    const match = description.match(pattern)
    if (match && match[1]) {
      origin = match[1].trim()
      break
    }
  }

  return { value, description, origin }
}
